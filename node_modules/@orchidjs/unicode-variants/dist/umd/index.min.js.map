{"version":3,"file":"index.min.js","sources":["../../lib/regex.ts","../../lib/strings.ts","../../lib/index.ts"],"sourcesContent":["/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const arrayToPattern = (chars: string[]): string => {\n\n\tchars = chars.filter( Boolean );\n\n\tif( chars.length < 2 ){\n\t\treturn chars[0] || '';\n\t}\n\n\treturn (maxValueLength(chars) == 1) ? '['+chars.join('')+']' : '(?:'+chars.join('|')+')';\n};\n\nexport const sequencePattern = (array: string[]): string => {\n\n\tif( !hasDuplicates(array) ){\n\t\treturn array.join('');\n\t}\n\n\tlet pattern = '';\n\tlet prev_char_count = 0;\n\n\tconst prev_pattern = ()=>{\n\t\tif( prev_char_count > 1 ){\n\t\t\tpattern += '{'+prev_char_count+'}';\n\t\t}\n\t}\n\n\tarray.forEach((char,i)=>{\n\n\t\tif( char === array[i-1] ){\n\t\t\tprev_char_count++;\n\t\t\treturn;\n\t\t}\n\n\t\tprev_pattern();\n\n\t\tpattern += char;\n\t\tprev_char_count = 1;\n\t});\n\n\tprev_pattern();\n\n\treturn pattern;\n\n}\n\n\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const setToPattern = (chars: Set<string>): string => {\n\tlet array = Array.from(chars);\n\treturn arrayToPattern(array);\n}\n\n\n\n/**\n * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values\n */\nexport const hasDuplicates = (array: any[]) => {\n    return (new Set(array)).size !== array.length;\n}\n\n\n/**\n * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n */\nexport const escape_regex = (str: string): string => {\n\treturn (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n};\n\n/**\n * Return the max length of array values\n */\nexport const maxValueLength = (array: string[]) => {\n\treturn array.reduce( (longest, value) => Math.max(longest,unicodeLength(value)),0);\n}\n\n\nexport const unicodeLength = (str: string) => {\n\treturn Array.from(str).length;\n}\n","/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n */\nexport const allSubstrings = (input: string): string[][] => {\n\n    if( input.length === 1) return [[input]];\n\n    let result: string[][] = [];\n\n\tconst start = input.substring(1);\n    const suba = allSubstrings(start);\n\n\tsuba.forEach(function(subresult) {\n        let tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n","import { setToPattern, arrayToPattern, escape_regex, sequencePattern } from './regex.ts';\nimport { allSubstrings } from './strings.ts';\n\nexport type TUnicodeMap = {[key:string]:string};\nexport type TUnicodeSets = {[key:string]:Set<string>};\nexport type TCodePoints = [[number,number]];\nexport type TCodePointObj = {folded:string,composed:string,code_point:number}\nexport type TSequencePart = {start:number,end:number,length:number,substr:string}\n\nexport const code_points: TCodePoints = [[ 0, 65535 ]];\n\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}\\u{2bc}]';\n\nexport let unicode_map: TUnicodeMap;\n\nlet multi_char_reg: RegExp;\n\nconst max_char_length = 3;\n\nconst latin_convert: TUnicodeMap = {}\n\nconst latin_condensed: TUnicodeMap = {\n\t'/': '⁄∕',\n\t'0': '߀',\n\t\"a\": \"ⱥɐɑ\",\n\t\"aa\": \"ꜳ\",\n\t\"ae\": \"æǽǣ\",\n\t\"ao\": \"ꜵ\",\n\t\"au\": \"ꜷ\",\n\t\"av\": \"ꜹꜻ\",\n\t\"ay\": \"ꜽ\",\n\t\"b\": \"ƀɓƃ\",\n\t\"c\": \"ꜿƈȼↄ\",\n\t\"d\": \"đɗɖᴅƌꮷԁɦ\",\n\t\"e\": \"ɛǝᴇɇ\",\n\t\"f\": \"ꝼƒ\",\n\t\"g\": \"ǥɠꞡᵹꝿɢ\",\n\t\"h\": \"ħⱨⱶɥ\",\n\t\"i\": \"ɨı\",\n\t\"j\": \"ɉȷ\",\n\t\"k\": \"ƙⱪꝁꝃꝅꞣ\",\n\t\"l\": \"łƚɫⱡꝉꝇꞁɭ\",\n\t\"m\": \"ɱɯϻ\",\n\t\"n\": \"ꞥƞɲꞑᴎлԉ\",\n\t\"o\": \"øǿɔɵꝋꝍᴑ\",\n\t\"oe\": \"œ\",\n\t\"oi\": \"ƣ\",\n\t\"oo\": \"ꝏ\",\n\t\"ou\": \"ȣ\",\n\t\"p\": \"ƥᵽꝑꝓꝕρ\",\n\t\"q\": \"ꝗꝙɋ\",\n\t\"r\": \"ɍɽꝛꞧꞃ\",\n\t\"s\": \"ßȿꞩꞅʂ\",\n\t\"t\": \"ŧƭʈⱦꞇ\",\n\t\"th\": \"þ\",\n\t\"tz\": \"ꜩ\",\n\t\"u\": \"ʉ\",\n\t\"v\": \"ʋꝟʌ\",\n\t\"vy\": \"ꝡ\",\n\t\"w\": \"ⱳ\",\n\t\"y\": \"ƴɏỿ\",\n\t\"z\": \"ƶȥɀⱬꝣ\",\n\t\"hv\": \"ƕ\"\n}\n\n\nfor( let latin in latin_condensed ){\n\tlet unicode = latin_condensed[latin] || '';\n\tfor( let i = 0; i < unicode.length; i++){\n\t\tlet char\t= unicode.substring(i,i+1);\n\t\tlatin_convert[char] = latin;\n\t}\n}\n\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|')+'|'+accent_pat,'gu');\n\n\n\n/**\n * Initialize the unicode_map from the give code point ranges\n */\nexport const initialize = (_code_points?: TCodePoints) => {\n\tif( unicode_map !== undefined ) return;\n\tunicode_map = generateMap(_code_points || code_points );\n}\n\n\n/**\n * Helper method for normalize a string\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n */\nexport const normalize = (str: string, form: string = 'NFKD') => str.normalize(form);\n\n\n\n/**\n * Remove accents without reordering string\n * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n */\nexport const asciifold = (str: string): string => {\n\n\treturn Array.from(str).reduce(\n\t\t/**\n\t\t * @param {string} result\n\t\t * @param {string} char\n\t\t */\n\t\t(result, char) =>{\n\t\t\treturn result + _asciifold(char)\n\t\t},\n\t\t''\n\t);\n};\n\nexport const _asciifold = (str: string): string => {\n\tstr = normalize(str)\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,(/** @type {string} */ char) => {\n\t\t\treturn latin_convert[char] || '';\n\t\t})\n\n\t//return str;\n\treturn normalize(str,'NFC')\n};\n\n/**\n * Generate a list of unicode variants from the list of code points\n */\nexport function* generator(code_points: TCodePoints): Generator<TCodePointObj> {\n\n\tfor(const [code_point_min, code_point_max] of code_points){\n\t\tfor(let i = code_point_min; i <= code_point_max; i++){\n\n\t\t\tlet composed\t\t= String.fromCharCode(i);\n\t\t\tlet folded\t\t\t= asciifold(composed);\n\n\n\t\t\tif( folded == composed.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when folded is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// folded صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// folded جل جلاله length 8 code point 65019\n\t\t\tif( folded.length > max_char_length ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( folded.length == 0 ){\n\t\t\t\tcontinue\n\t\t\t}\n\n\n\t\t\tyield {folded:folded,composed:composed,code_point:i};\n\t\t}\n\t}\n}\n\n\n/**\n * Generate a unicode map from the list of code points\n */\nexport const generateSets = (code_points: TCodePoints): TUnicodeSets => {\n\n\tconst unicode_sets: {[key: string]: Set<string>} = {};\n\n\tconst addMatching = (folded: string, to_add: string) => {\n\n\t\t/** @type {Set<string>} */\n\t\tconst folded_set = unicode_sets[folded] || new Set();\n\n\t\tconst patt = new RegExp( '^'+setToPattern(folded_set)+'$','iu');\n\t\tif( to_add.match(patt) ){\n\t\t\treturn;\n\t\t}\n\n\t\tfolded_set.add(escape_regex(to_add));\n\t\tunicode_sets[folded] = folded_set;\n\t}\n\n\n\tfor( let value of generator(code_points) ){\n\t\taddMatching(value.folded,value.folded);\n\t\taddMatching(value.folded,value.composed);\n\t}\n\n\treturn unicode_sets;\n}\n\n/**\n * Generate a unicode map from the list of code points\n * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n */\nexport const generateMap = (code_points: TCodePoints): TUnicodeMap => {\n\tconst unicode_sets = generateSets(code_points);\n\n\tconst unicode_map: TUnicodeMap = {};\n\n\tlet multi_char: string[] = [];\n\n\tfor( let folded in unicode_sets ){\n\n\t\tlet set = unicode_sets[folded];\n\t\tif( set ){\n\t\t\tunicode_map[folded] = setToPattern(set);\n\t\t}\n\n\t\tif( folded.length > 1 ){\n\t\t\tmulti_char.push(escape_regex(folded));\n\t\t}\n\t}\n\n\tmulti_char.sort((a, b) => b.length - a.length );\n\tconst multi_char_patt = arrayToPattern(multi_char);\n\tmulti_char_reg = new RegExp('^'+multi_char_patt,'u');\n\n\treturn unicode_map;\n}\n\n\n/**\n * Map each element of an array from its folded value to all possible unicode matches\n */\nexport const mapSequence = (strings: string[], min_replacement: number = 1): string =>{\n\tlet chars_replaced = 0;\n\n\tstrings = strings.map((str)=>{\n\t\tif( unicode_map[str] ){\n\t\t\tchars_replaced += str.length;\n\t\t}\n\t\treturn unicode_map[str] || str;\n\t});\n\n\tif( chars_replaced >= min_replacement ){\n\t\treturn sequencePattern(strings);\n\t}\n\n\treturn '';\n}\n\n/**\n * Convert a short string and split it into all possible patterns\n * Keep a pattern only if min_replacement is met\n *\n * 'abc'\n * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n *\t\t=> ['abc-pattern','ab-c-pattern'...]\n */\nexport const substringsToPattern = (str: string, min_replacement: number = 1): string => {\n\n\tmin_replacement = Math.max(min_replacement,str.length-1);\n\n\treturn arrayToPattern(\n\t\tallSubstrings(str).map( (sub_pat) =>{\n\t\t\treturn mapSequence(sub_pat,min_replacement)\n\t\t})\n\t);\n}\n\n/**\n * Convert an array of sequences into a pattern\n * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n */\nconst sequencesToPattern = (sequences: Sequence[], all: boolean = true) => {\n\n\tlet min_replacement = sequences.length > 1 ? 1 : 0;\n\treturn arrayToPattern(\n\t\tsequences.map( (sequence) =>{\n\t\t\tlet seq: string[] = [];\n\t\t\tconst len = all ? sequence.length() : sequence.length() - 1;\n\t\t\tfor( let j = 0; j < len; j++){\n\t\t\t\tseq.push(substringsToPattern(sequence.substrs[j]||'',min_replacement));\n\t\t\t}\n\n\t\t\treturn sequencePattern(seq);\n\t\t})\n\t);\n}\n\n/**\n * Return true if the sequence is already in the sequences\n */\nconst inSequences = (needle_seq: Sequence, sequences: Sequence[]) => {\n\n\tfor(const seq of sequences){\n\n\t\tif( seq.start != needle_seq.start || seq.end != needle_seq.end ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( seq.substrs.join('') !== needle_seq.substrs.join('') ){\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tlet needle_parts\t= needle_seq.parts;\n\n\t\tconst filter = (part: TSequencePart) =>{\n\n\t\t\tfor(const needle_part of needle_parts){\n\n\t\t\t\tif( needle_part.start === part.start && needle_part.substr === part.substr ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif( part.length == 1 || needle_part.length == 1 ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\n\t\t\t\t// check for overlapping parts\n\t\t\t\t// a = ['::=','==']\n\t\t\t\t// b = ['::','===']\n\t\t\t\t// a = ['r','sm']\n\t\t\t\t// b = ['rs','m']\n\t\t\t\tif( part.start < needle_part.start && part.end > needle_part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif( needle_part.start < part.start && needle_part.end > part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tlet filtered = seq.parts.filter(filter);\n\n\t\tif( filtered.length > 0 ){\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nclass Sequence{\n\tparts: TSequencePart[];\n\tsubstrs: string[];\n\tstart: number;\n\tend: number;\n\n\tconstructor(){\n\t\tthis.parts\t\t= [];\n\t\tthis.substrs\t= [];\n\t\tthis.start\t\t= 0;\n\t\tthis.end\t\t= 0;\n\t}\n\n\tadd(part: TSequencePart|undefined){\n\t\tif( part ){\n\t\t\tthis.parts.push(part);\n\t\t\tthis.substrs.push(part.substr);\n\t\t\tthis.start\t= Math.min(part.start,this.start);\n\t\t\tthis.end\t= Math.max(part.end,this.end);\n\t\t}\n\t}\n\n\tlast(){\n\t\treturn this.parts[this.parts.length-1];\n\t}\n\n\tlength(){\n\t\treturn this.parts.length;\n\t}\n\n\tclone(position: number, last_piece: TSequencePart){\n\t\tlet clone = new Sequence();\n\n\t\tlet parts = JSON.parse(JSON.stringify(this.parts));\n\t\tlet last_part = parts.pop();\n\t\tfor( const part of parts ){\n\t\t\tclone.add(part);\n\t\t}\n\n\t\tlet last_substr = last_piece.substr.substring(0,position-last_part.start);\n\t\tlet clone_last_len = last_substr.length;\n\t\tclone.add({start:last_part.start,end:last_part.start+clone_last_len,length:clone_last_len,substr:last_substr});\n\n\t\treturn clone;\n\t}\n\n}\n\n/**\n * Expand a regular expression pattern to include unicode variants\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * Issue:\n *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n *\n *\tİĲ = IIJ = ⅡJ\n *\n * \t1/2/4\n */\nexport const getPattern = (str: string): string | undefined => {\n\tinitialize();\n\n\tstr\t\t\t\t\t= asciifold(str);\n\n\tlet pattern\t\t\t= '';\n\tlet sequences\t\t= [new Sequence()];\n\n\tfor( let i = 0; i < str.length; i++ ){\n\n\t\tlet substr\t= str.substring(i);\n\t\tlet match\t= substr.match(multi_char_reg);\n\t\tconst char\t= str.substring(i,i+1);\n\t\tconst match_str = match ? match[0] : null;\n\n\n\t\t// loop through sequences\n\t\t// add either the char or multi_match\n\t\tlet overlapping: Sequence[]\t= [];\n\t\tlet added_types\t\t\t\t\t\t\t= new Set();\n\t\tfor(const sequence of sequences){\n\n\t\t\tconst last_piece\t= sequence.last();\n\n\n\t\t\tif( !last_piece || last_piece.length == 1 || last_piece.end <= i ){\n\n\t\t\t\t// if we have a multi match\n\t\t\t\tif( match_str ){\n\t\t\t\t\tconst len = match_str.length;\n\t\t\t\t\tsequence.add({start:i,end:i+len,length:len,substr:match_str});\n\t\t\t\t\tadded_types.add('1');\n\t\t\t\t}else{\n\t\t\t\t\tsequence.add({start:i,end:i+1,length:1,substr:char});\n\t\t\t\t\tadded_types.add('2');\n\t\t\t\t}\n\n\t\t\t}else if( match_str ){\n\n\t\t\t\tlet clone = sequence.clone(i,last_piece);\n\n\t\t\t\tconst len = match_str.length;\n\t\t\t\tclone.add({start:i,end:i+len,length:len,substr:match_str});\n\n\t\t\t\toverlapping.push(clone);\n\n\t\t\t}else{\n\t\t\t\t// don't add char\n\t\t\t\t// adding would create invalid patterns: 234 => [2,34,4]\n\t\t\t\tadded_types.add('3');\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if we have overlapping\n\t\tif( overlapping.length > 0 ){\n\n\t\t\t// ['ii','iii'] before ['i','i','iii']\n\t\t\toverlapping = overlapping.sort((a,b)=>{\n\t\t\t\treturn a.length() - b.length();\n\t\t\t});\n\n\t\t\tfor( let clone of overlapping){\n\n\t\t\t\t// don't add if we already have an equivalent sequence\n\t\t\t\tif( inSequences(clone, sequences) ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsequences.push(clone);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\n\t\t// if we haven't done anything unique\n\t\t// clean up the patterns\n\t\t// helps keep patterns smaller\n\t\t// if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n\t\tif( i > 0 && added_types.size == 1 && !added_types.has('3') ){\n\t\t\tpattern += sequencesToPattern(sequences,false);\n\t\t\tlet new_seq = new Sequence();\n\t\t\tconst old_seq = sequences[0];\n\t\t\tif( old_seq ){\n\t\t\t\tnew_seq.add(old_seq.last());\n\t\t\t}\n\t\t\tsequences = [new_seq];\n\t\t}\n\n\t}\n\n\tpattern += sequencesToPattern(sequences,true);\n\n\treturn pattern;\n}\n\n\nexport { escape_regex };\n"],"names":["arrayToPattern","chars","filter","Boolean","length","maxValueLength","join","sequencePattern","array","hasDuplicates","pattern","prev_char_count","prev_pattern","forEach","char","i","setToPattern","Array","from","Set","size","escape_regex","str","replace","reduce","longest","value","Math","max","unicodeLength","allSubstrings","input","result","start","substring","subresult","tmp","slice","charAt","push","unshift","code_points","multi_char_reg","unicode_map","latin_convert","latin_condensed","a","aa","ae","ao","au","av","ay","b","c","d","e","f","g","h","j","k","l","m","n","o","oe","oi","oo","ou","p","q","r","s","t","th","tz","u","v","vy","w","y","z","hv","latin","unicode","convert_pat","RegExp","Object","keys","initialize","_code_points","undefined","generateMap","normalize","form","asciifold","_asciifold","toLowerCase","generator","code_point_min","code_point_max","composed","String","fromCharCode","folded","code_point","generateSets","unicode_sets","addMatching","to_add","folded_set","patt","match","add","multi_char","set","sort","multi_char_patt","mapSequence","strings","min_replacement","chars_replaced","map","substringsToPattern","sub_pat","sequencesToPattern","sequences","all","sequence","seq","len","substrs","inSequences","needle_seq","end","needle_parts","parts","part","needle_part","substr","Sequence","constructor","this","min","last","clone","position","last_piece","JSON","parse","stringify","last_part","pop","last_substr","clone_last_len","match_str","overlapping","added_types","has","new_seq","old_seq"],"mappings":"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"}