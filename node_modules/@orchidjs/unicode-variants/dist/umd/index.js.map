{"version":3,"file":"index.js","sources":["../../lib/regex.ts","../../lib/strings.ts","../../lib/index.ts"],"sourcesContent":["/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const arrayToPattern = (chars: string[]): string => {\n\n\tchars = chars.filter( Boolean );\n\n\tif( chars.length < 2 ){\n\t\treturn chars[0] || '';\n\t}\n\n\treturn (maxValueLength(chars) == 1) ? '['+chars.join('')+']' : '(?:'+chars.join('|')+')';\n};\n\nexport const sequencePattern = (array: string[]): string => {\n\n\tif( !hasDuplicates(array) ){\n\t\treturn array.join('');\n\t}\n\n\tlet pattern = '';\n\tlet prev_char_count = 0;\n\n\tconst prev_pattern = ()=>{\n\t\tif( prev_char_count > 1 ){\n\t\t\tpattern += '{'+prev_char_count+'}';\n\t\t}\n\t}\n\n\tarray.forEach((char,i)=>{\n\n\t\tif( char === array[i-1] ){\n\t\t\tprev_char_count++;\n\t\t\treturn;\n\t\t}\n\n\t\tprev_pattern();\n\n\t\tpattern += char;\n\t\tprev_char_count = 1;\n\t});\n\n\tprev_pattern();\n\n\treturn pattern;\n\n}\n\n\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const setToPattern = (chars: Set<string>): string => {\n\tlet array = Array.from(chars);\n\treturn arrayToPattern(array);\n}\n\n\n\n/**\n * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values\n */\nexport const hasDuplicates = (array: any[]) => {\n    return (new Set(array)).size !== array.length;\n}\n\n\n/**\n * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n */\nexport const escape_regex = (str: string): string => {\n\treturn (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n};\n\n/**\n * Return the max length of array values\n */\nexport const maxValueLength = (array: string[]) => {\n\treturn array.reduce( (longest, value) => Math.max(longest,unicodeLength(value)),0);\n}\n\n\nexport const unicodeLength = (str: string) => {\n\treturn Array.from(str).length;\n}\n","/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n */\nexport const allSubstrings = (input: string): string[][] => {\n\n    if( input.length === 1) return [[input]];\n\n    let result: string[][] = [];\n\n\tconst start = input.substring(1);\n    const suba = allSubstrings(start);\n\n\tsuba.forEach(function(subresult) {\n        let tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n","import { setToPattern, arrayToPattern, escape_regex, sequencePattern } from './regex.ts';\nimport { allSubstrings } from './strings.ts';\n\nexport type TUnicodeMap = {[key:string]:string};\nexport type TUnicodeSets = {[key:string]:Set<string>};\nexport type TCodePoints = [[number,number]];\nexport type TCodePointObj = {folded:string,composed:string,code_point:number}\nexport type TSequencePart = {start:number,end:number,length:number,substr:string}\n\nexport const code_points: TCodePoints = [[ 0, 65535 ]];\n\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}\\u{2bc}]';\n\nexport let unicode_map: TUnicodeMap;\n\nlet multi_char_reg: RegExp;\n\nconst max_char_length = 3;\n\nconst latin_convert: TUnicodeMap = {}\n\nconst latin_condensed: TUnicodeMap = {\n\t'/': '⁄∕',\n\t'0': '߀',\n\t\"a\": \"ⱥɐɑ\",\n\t\"aa\": \"ꜳ\",\n\t\"ae\": \"æǽǣ\",\n\t\"ao\": \"ꜵ\",\n\t\"au\": \"ꜷ\",\n\t\"av\": \"ꜹꜻ\",\n\t\"ay\": \"ꜽ\",\n\t\"b\": \"ƀɓƃ\",\n\t\"c\": \"ꜿƈȼↄ\",\n\t\"d\": \"đɗɖᴅƌꮷԁɦ\",\n\t\"e\": \"ɛǝᴇɇ\",\n\t\"f\": \"ꝼƒ\",\n\t\"g\": \"ǥɠꞡᵹꝿɢ\",\n\t\"h\": \"ħⱨⱶɥ\",\n\t\"i\": \"ɨı\",\n\t\"j\": \"ɉȷ\",\n\t\"k\": \"ƙⱪꝁꝃꝅꞣ\",\n\t\"l\": \"łƚɫⱡꝉꝇꞁɭ\",\n\t\"m\": \"ɱɯϻ\",\n\t\"n\": \"ꞥƞɲꞑᴎлԉ\",\n\t\"o\": \"øǿɔɵꝋꝍᴑ\",\n\t\"oe\": \"œ\",\n\t\"oi\": \"ƣ\",\n\t\"oo\": \"ꝏ\",\n\t\"ou\": \"ȣ\",\n\t\"p\": \"ƥᵽꝑꝓꝕρ\",\n\t\"q\": \"ꝗꝙɋ\",\n\t\"r\": \"ɍɽꝛꞧꞃ\",\n\t\"s\": \"ßȿꞩꞅʂ\",\n\t\"t\": \"ŧƭʈⱦꞇ\",\n\t\"th\": \"þ\",\n\t\"tz\": \"ꜩ\",\n\t\"u\": \"ʉ\",\n\t\"v\": \"ʋꝟʌ\",\n\t\"vy\": \"ꝡ\",\n\t\"w\": \"ⱳ\",\n\t\"y\": \"ƴɏỿ\",\n\t\"z\": \"ƶȥɀⱬꝣ\",\n\t\"hv\": \"ƕ\"\n}\n\n\nfor( let latin in latin_condensed ){\n\tlet unicode = latin_condensed[latin] || '';\n\tfor( let i = 0; i < unicode.length; i++){\n\t\tlet char\t= unicode.substring(i,i+1);\n\t\tlatin_convert[char] = latin;\n\t}\n}\n\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|')+'|'+accent_pat,'gu');\n\n\n\n/**\n * Initialize the unicode_map from the give code point ranges\n */\nexport const initialize = (_code_points?: TCodePoints) => {\n\tif( unicode_map !== undefined ) return;\n\tunicode_map = generateMap(_code_points || code_points );\n}\n\n\n/**\n * Helper method for normalize a string\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n */\nexport const normalize = (str: string, form: string = 'NFKD') => str.normalize(form);\n\n\n\n/**\n * Remove accents without reordering string\n * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n */\nexport const asciifold = (str: string): string => {\n\n\treturn Array.from(str).reduce(\n\t\t/**\n\t\t * @param {string} result\n\t\t * @param {string} char\n\t\t */\n\t\t(result, char) =>{\n\t\t\treturn result + _asciifold(char)\n\t\t},\n\t\t''\n\t);\n};\n\nexport const _asciifold = (str: string): string => {\n\tstr = normalize(str)\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,(/** @type {string} */ char) => {\n\t\t\treturn latin_convert[char] || '';\n\t\t})\n\n\t//return str;\n\treturn normalize(str,'NFC')\n};\n\n/**\n * Generate a list of unicode variants from the list of code points\n */\nexport function* generator(code_points: TCodePoints): Generator<TCodePointObj> {\n\n\tfor(const [code_point_min, code_point_max] of code_points){\n\t\tfor(let i = code_point_min; i <= code_point_max; i++){\n\n\t\t\tlet composed\t\t= String.fromCharCode(i);\n\t\t\tlet folded\t\t\t= asciifold(composed);\n\n\n\t\t\tif( folded == composed.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when folded is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// folded صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// folded جل جلاله length 8 code point 65019\n\t\t\tif( folded.length > max_char_length ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( folded.length == 0 ){\n\t\t\t\tcontinue\n\t\t\t}\n\n\n\t\t\tyield {folded:folded,composed:composed,code_point:i};\n\t\t}\n\t}\n}\n\n\n/**\n * Generate a unicode map from the list of code points\n */\nexport const generateSets = (code_points: TCodePoints): TUnicodeSets => {\n\n\tconst unicode_sets: {[key: string]: Set<string>} = {};\n\n\tconst addMatching = (folded: string, to_add: string) => {\n\n\t\t/** @type {Set<string>} */\n\t\tconst folded_set = unicode_sets[folded] || new Set();\n\n\t\tconst patt = new RegExp( '^'+setToPattern(folded_set)+'$','iu');\n\t\tif( to_add.match(patt) ){\n\t\t\treturn;\n\t\t}\n\n\t\tfolded_set.add(escape_regex(to_add));\n\t\tunicode_sets[folded] = folded_set;\n\t}\n\n\n\tfor( let value of generator(code_points) ){\n\t\taddMatching(value.folded,value.folded);\n\t\taddMatching(value.folded,value.composed);\n\t}\n\n\treturn unicode_sets;\n}\n\n/**\n * Generate a unicode map from the list of code points\n * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n */\nexport const generateMap = (code_points: TCodePoints): TUnicodeMap => {\n\tconst unicode_sets = generateSets(code_points);\n\n\tconst unicode_map: TUnicodeMap = {};\n\n\tlet multi_char: string[] = [];\n\n\tfor( let folded in unicode_sets ){\n\n\t\tlet set = unicode_sets[folded];\n\t\tif( set ){\n\t\t\tunicode_map[folded] = setToPattern(set);\n\t\t}\n\n\t\tif( folded.length > 1 ){\n\t\t\tmulti_char.push(escape_regex(folded));\n\t\t}\n\t}\n\n\tmulti_char.sort((a, b) => b.length - a.length );\n\tconst multi_char_patt = arrayToPattern(multi_char);\n\tmulti_char_reg = new RegExp('^'+multi_char_patt,'u');\n\n\treturn unicode_map;\n}\n\n\n/**\n * Map each element of an array from its folded value to all possible unicode matches\n */\nexport const mapSequence = (strings: string[], min_replacement: number = 1): string =>{\n\tlet chars_replaced = 0;\n\n\tstrings = strings.map((str)=>{\n\t\tif( unicode_map[str] ){\n\t\t\tchars_replaced += str.length;\n\t\t}\n\t\treturn unicode_map[str] || str;\n\t});\n\n\tif( chars_replaced >= min_replacement ){\n\t\treturn sequencePattern(strings);\n\t}\n\n\treturn '';\n}\n\n/**\n * Convert a short string and split it into all possible patterns\n * Keep a pattern only if min_replacement is met\n *\n * 'abc'\n * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n *\t\t=> ['abc-pattern','ab-c-pattern'...]\n */\nexport const substringsToPattern = (str: string, min_replacement: number = 1): string => {\n\n\tmin_replacement = Math.max(min_replacement,str.length-1);\n\n\treturn arrayToPattern(\n\t\tallSubstrings(str).map( (sub_pat) =>{\n\t\t\treturn mapSequence(sub_pat,min_replacement)\n\t\t})\n\t);\n}\n\n/**\n * Convert an array of sequences into a pattern\n * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n */\nconst sequencesToPattern = (sequences: Sequence[], all: boolean = true) => {\n\n\tlet min_replacement = sequences.length > 1 ? 1 : 0;\n\treturn arrayToPattern(\n\t\tsequences.map( (sequence) =>{\n\t\t\tlet seq: string[] = [];\n\t\t\tconst len = all ? sequence.length() : sequence.length() - 1;\n\t\t\tfor( let j = 0; j < len; j++){\n\t\t\t\tseq.push(substringsToPattern(sequence.substrs[j]||'',min_replacement));\n\t\t\t}\n\n\t\t\treturn sequencePattern(seq);\n\t\t})\n\t);\n}\n\n/**\n * Return true if the sequence is already in the sequences\n */\nconst inSequences = (needle_seq: Sequence, sequences: Sequence[]) => {\n\n\tfor(const seq of sequences){\n\n\t\tif( seq.start != needle_seq.start || seq.end != needle_seq.end ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( seq.substrs.join('') !== needle_seq.substrs.join('') ){\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tlet needle_parts\t= needle_seq.parts;\n\n\t\tconst filter = (part: TSequencePart) =>{\n\n\t\t\tfor(const needle_part of needle_parts){\n\n\t\t\t\tif( needle_part.start === part.start && needle_part.substr === part.substr ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif( part.length == 1 || needle_part.length == 1 ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\n\t\t\t\t// check for overlapping parts\n\t\t\t\t// a = ['::=','==']\n\t\t\t\t// b = ['::','===']\n\t\t\t\t// a = ['r','sm']\n\t\t\t\t// b = ['rs','m']\n\t\t\t\tif( part.start < needle_part.start && part.end > needle_part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif( needle_part.start < part.start && needle_part.end > part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tlet filtered = seq.parts.filter(filter);\n\n\t\tif( filtered.length > 0 ){\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nclass Sequence{\n\tparts: TSequencePart[];\n\tsubstrs: string[];\n\tstart: number;\n\tend: number;\n\n\tconstructor(){\n\t\tthis.parts\t\t= [];\n\t\tthis.substrs\t= [];\n\t\tthis.start\t\t= 0;\n\t\tthis.end\t\t= 0;\n\t}\n\n\tadd(part: TSequencePart|undefined){\n\t\tif( part ){\n\t\t\tthis.parts.push(part);\n\t\t\tthis.substrs.push(part.substr);\n\t\t\tthis.start\t= Math.min(part.start,this.start);\n\t\t\tthis.end\t= Math.max(part.end,this.end);\n\t\t}\n\t}\n\n\tlast(){\n\t\treturn this.parts[this.parts.length-1];\n\t}\n\n\tlength(){\n\t\treturn this.parts.length;\n\t}\n\n\tclone(position: number, last_piece: TSequencePart){\n\t\tlet clone = new Sequence();\n\n\t\tlet parts = JSON.parse(JSON.stringify(this.parts));\n\t\tlet last_part = parts.pop();\n\t\tfor( const part of parts ){\n\t\t\tclone.add(part);\n\t\t}\n\n\t\tlet last_substr = last_piece.substr.substring(0,position-last_part.start);\n\t\tlet clone_last_len = last_substr.length;\n\t\tclone.add({start:last_part.start,end:last_part.start+clone_last_len,length:clone_last_len,substr:last_substr});\n\n\t\treturn clone;\n\t}\n\n}\n\n/**\n * Expand a regular expression pattern to include unicode variants\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * Issue:\n *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n *\n *\tİĲ = IIJ = ⅡJ\n *\n * \t1/2/4\n */\nexport const getPattern = (str: string): string | undefined => {\n\tinitialize();\n\n\tstr\t\t\t\t\t= asciifold(str);\n\n\tlet pattern\t\t\t= '';\n\tlet sequences\t\t= [new Sequence()];\n\n\tfor( let i = 0; i < str.length; i++ ){\n\n\t\tlet substr\t= str.substring(i);\n\t\tlet match\t= substr.match(multi_char_reg);\n\t\tconst char\t= str.substring(i,i+1);\n\t\tconst match_str = match ? match[0] : null;\n\n\n\t\t// loop through sequences\n\t\t// add either the char or multi_match\n\t\tlet overlapping: Sequence[]\t= [];\n\t\tlet added_types\t\t\t\t\t\t\t= new Set();\n\t\tfor(const sequence of sequences){\n\n\t\t\tconst last_piece\t= sequence.last();\n\n\n\t\t\tif( !last_piece || last_piece.length == 1 || last_piece.end <= i ){\n\n\t\t\t\t// if we have a multi match\n\t\t\t\tif( match_str ){\n\t\t\t\t\tconst len = match_str.length;\n\t\t\t\t\tsequence.add({start:i,end:i+len,length:len,substr:match_str});\n\t\t\t\t\tadded_types.add('1');\n\t\t\t\t}else{\n\t\t\t\t\tsequence.add({start:i,end:i+1,length:1,substr:char});\n\t\t\t\t\tadded_types.add('2');\n\t\t\t\t}\n\n\t\t\t}else if( match_str ){\n\n\t\t\t\tlet clone = sequence.clone(i,last_piece);\n\n\t\t\t\tconst len = match_str.length;\n\t\t\t\tclone.add({start:i,end:i+len,length:len,substr:match_str});\n\n\t\t\t\toverlapping.push(clone);\n\n\t\t\t}else{\n\t\t\t\t// don't add char\n\t\t\t\t// adding would create invalid patterns: 234 => [2,34,4]\n\t\t\t\tadded_types.add('3');\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if we have overlapping\n\t\tif( overlapping.length > 0 ){\n\n\t\t\t// ['ii','iii'] before ['i','i','iii']\n\t\t\toverlapping = overlapping.sort((a,b)=>{\n\t\t\t\treturn a.length() - b.length();\n\t\t\t});\n\n\t\t\tfor( let clone of overlapping){\n\n\t\t\t\t// don't add if we already have an equivalent sequence\n\t\t\t\tif( inSequences(clone, sequences) ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsequences.push(clone);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\n\t\t// if we haven't done anything unique\n\t\t// clean up the patterns\n\t\t// helps keep patterns smaller\n\t\t// if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n\t\tif( i > 0 && added_types.size == 1 && !added_types.has('3') ){\n\t\t\tpattern += sequencesToPattern(sequences,false);\n\t\t\tlet new_seq = new Sequence();\n\t\t\tconst old_seq = sequences[0];\n\t\t\tif( old_seq ){\n\t\t\t\tnew_seq.add(old_seq.last());\n\t\t\t}\n\t\t\tsequences = [new_seq];\n\t\t}\n\n\t}\n\n\tpattern += sequencesToPattern(sequences,true);\n\n\treturn pattern;\n}\n\n\nexport { escape_regex };\n"],"names":["arrayToPattern","chars","filter","Boolean","length","maxValueLength","join","sequencePattern","array","hasDuplicates","pattern","prev_char_count","prev_pattern","forEach","char","i","setToPattern","Array","from","Set","size","escape_regex","str","replace","reduce","longest","value","Math","max","unicodeLength","allSubstrings","input","result","start","substring","suba","subresult","tmp","slice","charAt","push","unshift","code_points","accent_pat","unicode_map","multi_char_reg","max_char_length","latin_convert","latin_condensed","latin","unicode","convert_pat","RegExp","Object","keys","initialize","_code_points","undefined","generateMap","normalize","form","asciifold","_asciifold","toLowerCase","generator","code_point_min","code_point_max","composed","String","fromCharCode","folded","code_point","generateSets","unicode_sets","addMatching","to_add","folded_set","patt","match","add","multi_char","set","sort","a","b","multi_char_patt","mapSequence","strings","min_replacement","chars_replaced","map","substringsToPattern","sub_pat","sequencesToPattern","sequences","all","sequence","seq","len","j","substrs","inSequences","needle_seq","end","needle_parts","parts","part","needle_part","substr","filtered","Sequence","constructor","min","last","clone","position","last_piece","JSON","parse","stringify","last_part","pop","last_substr","clone_last_len","getPattern","match_str","overlapping","added_types","has","new_seq","old_seq"],"mappings":"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"}